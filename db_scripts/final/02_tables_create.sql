CREATE TABLE WEBSTORE.CUSTOMER_T (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FIRST_NAME VARCHAR2(150 BYTE),
    LAST_NAME VARCHAR2(150 BYTE),
    PHONE_NUMBER VARCHAR2(9 BYTE),
    POSTAL_CODE VARCHAR2(15 BYTE),
    STREET VARCHAR2(15 BYTE),
    NIP VARCHAR2(12 BYTE),
    COMPANY_NAME VARCHAR2(150 BYTE),
    CITY VARCHAR2(100 BYTE)
);

CREATE INDEX IDX_CUSTOMER_CITY ON WEBSTORE.CUSTOMER_T (CITY);

CREATE TABLE WEBSTORE.USER_ROLE_T (
    ROLE_KEY VARCHAR2(10 BYTE) PRIMARY KEY,
    DESCRIPTION VARCHAR2(500 BYTE)
);


CREATE TABLE WEBSTORE.USER_T (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL VARCHAR2(150 BYTE),
    PASSWORD_HASH VARCHAR2(150 BYTE),
    IS_SUPERUSER NUMBER(1),
    IS_ACTIVE NUMBER(1),
    CUSTOMER_ID NUMBER(38),
    CONSTRAINT FK_USER_T2CUSTOMER_T FOREIGN KEY (CUSTOMER_ID) REFERENCES WEBSTORE.CUSTOMER_T(ID)
);

CREATE TABLE WEBSTORE.USER_ROLE_LINK_T (
    USER_ID NUMBER(38),
    ROLE_KEY VARCHAR2(10 BYTE),
    PRIMARY KEY (USER_ID, ROLE_KEY),
    CONSTRAINT FK_USER_ROLE_T FOREIGN KEY (ROLE_KEY) REFERENCES WEBSTORE.USER_ROLE_T(ROLE_KEY),
    CONSTRAINT FK_USER_T FOREIGN KEY (USER_ID) REFERENCES WEBSTORE.USER_T(ID)
);


CREATE TABLE WEBSTORE.DICTS_T (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DICT_NAME VARCHAR2(20 BYTE),
    DICT_KEY VARCHAR2(20 BYTE),
    DICT_VALUE VARCHAR2(50 BYTE),
    ORD NUMBER
);
CREATE UNIQUE INDEX UNQ_DICTS_T_NAME_KEY ON WEBSTORE.DICTS_T (DICT_NAME, DICT_KEY);



CREATE TABLE WEBSTORE.PRODUCT_T (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    BRAND VARCHAR2(20 BYTE),
    PRICE NUMBER(10),
    NAME VARCHAR2(150 BYTE),
    EAN VARCHAR2(13 BYTE),
    CREATED_AT TIMESTAMP,
    UPDATED_AT TIMESTAMP,
    BRAND_ID NUMBER,
    PRODUCT_TYPE_ID NUMBER,
    CONSTRAINT FK_PRODUCT_T_BRAND FOREIGN KEY (BRAND_ID) REFERENCES WEBSTORE.DICTS_T(ID),
    CONSTRAINT FK_PRODUCT_T_PRODUCT_TYPE FOREIGN KEY (PRODUCT_TYPE_ID) REFERENCES WEBSTORE.DICTS_T(ID)
);


-- Tworzenie tabeli WAREHOUSE_T
CREATE TABLE WEBSTORE.WAREHOUSE_T (
    PRODUCT_ID NUMBER PRIMARY KEY,
    QUANTITY_ON_STOCK NUMBER,
    CONSTRAINT FK_WAREHOUSE_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES WEBSTORE.PRODUCT_T(ID)
);


CREATE TABLE WEBSTORE.ORDER_T (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CUSTOMER_ID NUMBER(38),
    ORDER_NUMBER VARCHAR2(20 CHAR),
    ORDER_DATE DATE,
    DELIVERY_DATE DATE,
    IS_PAID NUMBER(1),
    PAYMENT_METHOD_ID NUMBER,
    DELIVERY_METHOD_ID NUMBER,
    STATUS_ID NUMBER,
    CONSTRAINT FK_ORDER_T_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES WEBSTORE.CUSTOMER_T(ID),
    CONSTRAINT FK_ORDER_T_DELIVERY_METHOD FOREIGN KEY (DELIVERY_METHOD_ID) REFERENCES WEBSTORE.DICTS_T(ID),
    CONSTRAINT FK_ORDER_T_PAYMENT_METHOD FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES WEBSTORE.DICTS_T(ID),
    CONSTRAINT FK_ORDER_T_STATUS FOREIGN KEY (STATUS_ID) REFERENCES WEBSTORE.DICTS_T(ID)
);

CREATE INDEX IDX_CUSTOMER_ID ON WEBSTORE.ORDER_T (CUSTOMER_ID);
CREATE UNIQUE INDEX IDX_UNIQUE_ORDER_NUMBER ON WEBSTORE.ORDER_T (ORDER_NUMBER);


CREATE TABLE WEBSTORE.ORDER_ROW_T (
    ORDER_ID NUMBER(36),
    PRODUCT_ID NUMBER(36),
    QUANTITY NUMBER(10),
    PRIMARY KEY (ORDER_ID, PRODUCT_ID),
    CONSTRAINT FK_ORDER_ROW_T_ORDER FOREIGN KEY (ORDER_ID) REFERENCES WEBSTORE.ORDER_T(ID),
    CONSTRAINT FK_ORDER_ROW_T_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES WEBSTORE.PRODUCT_T(ID)
);

-- Tworzenie tabeli LOGS_T
CREATE TABLE WEBSTORE.LOGS_T (
    USER_NAME VARCHAR2(20 BYTE),
    DESCRIPTION VARCHAR2(300 BYTE),
    WHEN_TS TIMESTAMP
);
